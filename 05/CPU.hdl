// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    And(a=instruction[5], b=instruction[15], out=selALUOut);
    Mux16(a=instruction, b=ALUout, sel=selALUOut, out=ARegIn);

    /* A-command */
    Not(in=instruction[15], out=loadAReg1); 
    Or(a=loadAReg1, b=selALUOut, out=loadAReg); 
    /* A-register */
    ARegister(in=ARegIn, load=loadAReg, out=ARegOut, out[0..14]=addressM);

    /* D-register */
    And(a=instruction[15], b=instruction[4], out=loadDReg); 
    DRegister(in=ALUout, load=loadDReg, out=DRegOut); 

    /* C-command */
    Mux16(a=ARegOut, b=inM, sel=instruction[12], out=ALUy);
    ALU(zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        x=DRegOut,
        y=ALUy,
        out=ALUout,
        out=outM,
        zr=zr,
        ng=ng);

    /* M-write */
    And(a=instruction[3], b=instruction[15], out=writeM);

    /* Jump */
    Not(in=ng, out=notNg);
    Not(in=zr, out=notZr);
    Not(in=instruction[0], out=notJ0out);
    Not(in=instruction[1], out=notJ1out);
    Not(in=instruction[2], out=notJ2out);

    And(a=instruction[0], b=notNg, out=JGT1);
    And(a=notJ2out, b=notJ1out, out=JGT2);
    And(a=JGT2, b=JGT1, out=JGT3);
    And(a=JGT3, b=notZr, out=JGT);

    And(a=notJ0out, b=notJ2out, out=JEQ1);
    And(a=instruction[1], b=JEQ1, out=JEQ2);
    And(a=JEQ2, b=zr, out=JEQ);

    And(a=instruction[1], b=instruction[0], out=JGE1);
    Or(a=zr, b=notNg, out=JGE2);
    And(a=JGE1, b=JGE2, out=JGE3);
    And(a=JGE3, b=notJ2out, out=JGE);

    And(a=notJ1out, b=notJ0out, out=JLT1);
    And(a=ng, b=instruction[2], out=JLT2);
    And(a=JLT1, b=JLT2, out=JLT);

    And(a=instruction[2], b=instruction[0], out=JNE1);
    And(a=notJ1out, b=JNE1, out=JNE2);
    And(a=JNE2, b=notZr, out=JNE);

    And(a=instruction[2], b=instruction[1], out=JLE1);
    Or(a=zr, b=ng, out=JLE2);
    And(a=JLE1, b=JLE2, out=JLE3);
    And(a=JLE3, b=notJ0out, out=JLE);


    And(a=instruction[0], b=instruction[1], out=JMP1);
    And(a=JMP1, b=instruction[2], out=JMP);

    Or8Way(in[0]=JGT, in[1]=JEQ, in[2]=JGE, in[3]=JLT,
           in[4]=JNE, in[5]=JLE, in[6]=JMP, in[7]=false,
           out=jumpOut1);

    And(a=jumpOut1, b=instruction[15], out=jumpOut);
    Not(in=jumpOut, out=notJumpOut);

    PC(in=ARegOut, load=jumpOut, reset=reset, inc=notJumpOut, out[0..14]=pc);
}
